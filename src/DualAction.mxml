<?xml version="1.0" encoding="utf-8"?>
<local:TabUI xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			
			import spark.events.IndexChangeEvent;
			
			
			private var jsonDataArray:Array;
			private var _currentDualactionInfo:HexInfoDualAction;
			private var dualactionVector:Vector.<uint>;	// ArrayList
			private var compoundKeys:Array;
			private var aloneKeys:Array;
			private var fileReference:FileReference;
			private var hexData:String;
			private var __loadedFileName:LoadedFileName;
			
			override public function setData(xObj:Object):void{
				jsonDataArray = xObj["dualactionConfigArr"];
				
			}
			
			override public function init():void
			{			
				_isReady = true;
				
				applyTargetList();
				
				loadKeyData();
			}
			
			private function loadKeyData():void
			{
				var gRequest:URLRequest = new URLRequest();	
				gRequest.url = "json/dualaction.json"
				var gJsonLoader:JSONLoader = new JSONLoader();
				try {
					gJsonLoader.load(gRequest, __onLoadKeyIndex);
				} catch (error:Error) {
					Alert.show("Unable to load requested document.");
				}	
			}
			protected function __onLoadKeyIndex(event:Event):void
			{
				switch(event.type){
					case Event.COMPLETE:
						try{
							var gURLoader:URLLoader = URLLoader(event.target);
							//							trace(this, gURLoader.data);
							var gObj:Object = JSON.parse(gURLoader.data);
							compoundKeys = gObj.compoundKeys;
							aloneKeys = gObj.aloneKeys;
							
							draw();
							
						}catch(e:Error){
							trace(this, e);
						}
						
						break;
					
					case ProgressEvent.PROGRESS:
						break;
					default:
						//						trace(this, "__onLoadJson",  event);
						Alert.show("__onLoadJson: " + event.toString());
						break;
				}
			}
			public function get currentDualactionInfo():HexInfoDualAction
			{
				return _currentDualactionInfo;
			}
			public function getHexData():String{
				return __getHexData(true);
			}
			private function __getHexData(xExceptNewline:Boolean = false):String
			{
				var gHexData:String = "";
				var gLen:int = _currentDualactionInfo.dualactionNum;
				var gLenHalf:int = (gLen >> 1);
				var gDualActionKey:DualActionKey;
				for(var i:int = 0; i < gLen ; ++i)
				{
					
					
					if(i < gLenHalf)
					{
						gDualActionKey = this.grp_dualaction_left.getElementAt(i) as DualActionKey;
					}
					else
					{
						gDualActionKey = this.grp_dualaction_right.getElementAt(i - gLenHalf) as DualActionKey;
					}
					
					if(gDualActionKey)
					{
						gHexData += gDualActionKey.getHexData();
					}
				}
				
//				trace("DA gHexData : " + gHexData);
				
				return HexParser.convertToHex(gHexData, gLen * 2, parseInt(_currentDualactionInfo.startAddress, 16), xExceptNewline);
			}
			private function applyTargetList():void
			{
				this.ddl_target.labelField = "targetName";
				this.ddl_target.dataProvider = new ArrayList(jsonDataArray);
				this.ddl_target.selectedIndex = 0;
				applyTarget();
			}
			protected function __onTargetValueCommit(event:Event):void
			{				
				applyTarget();
			}
			private function applyTarget():void
			{
				if(this.ddl_target.selectedIndex > -1)
				{
					_currentDualactionInfo = new HexInfoDualAction(jsonDataArray[this.ddl_target.selectedIndex]);	
					
					dispatchEvent(new Event(ConstString.CHANGE_TARGET));

					dualactionVector = null;
					
					draw();	
				}
			}
			
			public function applySerializeData(xDataStr:String):void{
				
				var gDualActionVec:Vector.<uint> = HexParser.parseToListDataForDualAction(xDataStr, _currentDualactionInfo);
				if(gDualActionVec == null) {
					Alert.show("invalid dual action target");
					return;
				}
				
				dualactionVector = gDualActionVec;
				
				draw();	
			}
			
			private function draw():void
			{
				
				remove();
				// 시작 초기화;
				
				var gLen:int = _currentDualactionInfo.dualactionNum;
				var gDualActionKey:DualActionKey;
				var gHexIndex:int = 0;
				for(var i:int = 0; i < gLen ; ++i)
				{
					gDualActionKey = new DualActionKey();
					gDualActionKey.setLabel("Dual Act" + (i+1));
					gDualActionKey.setDataProviders(compoundKeys, aloneKeys);
					if(dualactionVector)
					{
						gDualActionKey.setIndexes(dualactionVector[gHexIndex++], dualactionVector[gHexIndex++]);
					}
					
					if(i < (gLen >> 1))
					{
						this.grp_dualaction_left.addElement(gDualActionKey);
					}
					else
					{
						this.grp_dualaction_right.addElement(gDualActionKey);
					}
				}
			}
			
			
			private function remove():void
			{
				this.grp_dualaction_left.removeAllElements();
				this.grp_dualaction_right.removeAllElements();
			}
			
			protected function __onClickSave(event:MouseEvent):void
			{
				var gHexStr:String =__getHexData();
				var gFile:FileReference = new FileReference();
				var gDate:Date = new Date();
				var gName:String;
				if(__loadedFileName && __loadedFileName.hasName())
				{
					gName = __loadedFileName.name + _currentDualactionInfo.fileExt;
				}else{
					
					gName = _currentDualactionInfo.fileName + Util.dateToString(gDate)+ _currentDualactionInfo.fileExt;
				}
				gFile.save(gHexStr, gName);
			}
			
			protected function __onClickLoad(event:MouseEvent):void
			{
				fileReference = new FileReference();
				fileReference.addEventListener(Event.SELECT, __onFileReference);
				fileReference.addEventListener(Event.CANCEL, __onFileReference);
				fileReference.addEventListener(Event.COMPLETE, __onFileReference);
				fileReference.browse([new FileFilter("ps2avrU macor.hex file (*.hex)", "*.hex")]);
			}
			protected function __onFileReference(event:Event):void
			{
				switch(event.type){
					case Event.SELECT:
						fileReference.load();
						
						break;
					case Event.CANCEL:
						break;
					case Event.COMPLETE:
						try{
								
							__loadedFileName = new LoadedFileName();
							__loadedFileName.name = fileReference.name;
								
							if(__loadedFileName.type == "hex"){
								hexData = fileReference.data.toString();
								
								if(HexParser.getStartAddress(hexData) != _currentDualactionInfo.startAddress){
									throw new Error("\""+fileReference.name + "\" is not dual action file");
								}
								
								applySerializeData(HexParser.extractHexData(hexData, _currentDualactionInfo.dualactionNum * 2));
								
							}else{
								__loadedFileName = null;
								throw new Error("invalid file type");
							}
							
						}catch(e:Error){							
							Alert.show(e.message);
							return;
						}
						break;
					
				}
			}
			
			protected function __onClickClearAll(event:MouseEvent):void
			{
				dualactionVector = null;
				
				draw();
			}
			
		]]>
	</fx:Script>
	
	<s:Scroller width="100%" height="100%">
		
			<s:Group id="grp_ui" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout gap="0" >
						
					</s:VerticalLayout>
				</s:layout>
				<s:HGroup verticalAlign="middle" width="100%">	
					<s:Spacer width="100%" />	
					<s:Label id="lb_target" text="{resourceManager.getString('lang','STR_TARGET')}:"/>
					<s:DropDownList id="ddl_target" width="200" change="__onTargetValueCommit(event)" />
				</s:HGroup>
				<s:Spacer height="10"/>
				<local:BMBorderContainer width="100%">
								
					<s:Spacer height="15"/>
					<s:HGroup width="100%" minHeight="500">
						<s:VGroup id="grp_dualaction_left" width="50%" height="100%" gap="10">
							
						</s:VGroup>
						<s:Spacer width="10" />
						<s:VGroup id="grp_dualaction_right" width="50%" height="100%" gap="10">
							
						</s:VGroup>
					</s:HGroup>
					<s:Spacer height="15"/>
							
					
				</local:BMBorderContainer>
				<s:Spacer height="5"/>
				<s:HGroup width="100%">
					<s:Button id="btn_save" label="Save .hex" click="__onClickSave(event)"/>
					<s:Button id="btn_load" label="Load .hex" click="__onClickLoad(event)"/>
					<s:Spacer width="100%"/>
					<s:Button id="btn_clear_all" label="{resourceManager.getString('lang','STR_CLEAR_ALL')}" click="__onClickClearAll(event)"/>
				</s:HGroup>
				
			</s:Group>
		
	</s:Scroller>
</local:TabUI>
