<?xml version="1.0" encoding="utf-8"?>
<local:BootmapperContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                           xmlns:s="library://ns.adobe.com/flex/spark" 
                           xmlns:mx="library://ns.adobe.com/flex/mx" 
						   xmlns:local="*"
                           initialize="initDesktop()"
                           width="400" height="300">
    
	<fx:Metadata>
		[ResourceBundle("lang")]
	</fx:Metadata>
	
    <fx:Script>
        <![CDATA[
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.components.Alert;
			import spark.events.IndexChangeEvent;
			import mx.core.Application;
            
            [Bindable]
            protected var VERSION_CLIENT:String = "Bootmapper Ver " ;    // 버젼 변경은 app.xml 에서 해준다.
            
            private var isBootmapper:Boolean = false;
            private var optionsData:Object;

            private var so:SharedObject;
            
            private function loadOptionsData():void
            {
				
                var gRequest:URLRequest = new URLRequest();	
                gRequest.url = "json/options.json"
                var gJsonLoader:JSONLoader = new JSONLoader();
                try {
                    gJsonLoader.load(gRequest, __onLoadOptions);
                } catch (error:Error) {
                    Alert.show("Unable to load requested document.");
                }	
            }
            override protected function __start():void
            {
                loadOptionsData();
            }
            protected function __startDesktop():void
            {
//                trace("hex-", HexParser.convertToHex("00ff0088ff00ffff00ff00008800ff0000ff00ffaaFF00FF00FF0000FFAA", 30, 373));
                // 00ff0088ff00ffff00ff00008800ff0000ff00ffaa
                this.tabbar.selectedIndex = 0;
                __onValueCommit(null);
                
//                Alert.show("Welcome.\n"+VERSION_CLIENT, "", 4, null, __closeAlert);
                this.enabled = true;
            }
            
            private function __onInitTabUI(event:FlexEvent):void
            {
                __onValueCommit(null);
            }
            
            private function __onKeyUp(event:KeyboardEvent):void
            {
                trace(this.name, event.keyCode);
            }
            
            private function __closeAlert(event:Event):void
            {
                //                this.focusManager.setFocus();
                this.systemManager.stage.focus = null;
            }
            
            private function initDesktop():void
            {
                var xml : XML = NativeApplication.nativeApplication.applicationDescriptor;
                var ns : Namespace = xml.namespace();
                var version : String = xml.ns::versionNumber;
                VERSION_CLIENT += version;

				var locale:String;
				so = SharedObject.getLocal("__BMC_LOCALE__");
				if(so.data.locale == undefined)
				{
					locale = "en_US"
				}
				else
				{
					locale = so.data.locale;
				}
				//locale 
				resourceManager.localeChain = [locale];
				//this.ddl_locale.setStyle("borderVisible", false);
				if(locale == "en_US")
				{
					this.ddl_locale.selectedIndex = 0;
				}
				else
				{	// ko_KR
					this.ddl_locale.selectedIndex = 1;
				}
				
                
                this.tabbar.selectedIndex = -1;
                
            }
            
            protected function _onClick(e:MouseEvent):void
            {
                
                var gStr:String;
                var gBool:Boolean;
				var gIsQMacro:Boolean = false;
                switch(e.currentTarget){
                    case this.btn_upload:
                        // keymap에서 현재 keymap의 hex data를 줄 바꿈 없이 가져온다.
                        gStr = this.keymap.getHexData();
                        gBool = this.cb_reboot.selected
                        
                        /*var gKeymapLen:int = this.keymap.getCurrnetKeymapLength();
                        // gb = 15 * 8 * 4 = 480
                        var gInfo:HexInfoKeymap = this.keymap.currentHexFileInfo;
                        var gKeymapLen:int = gInfo.columns * gInfo.rows * gInfo.layers;
                        if(gKeymapLen != gKeymapLen){  // ps2avrGB, U
                            Alert.show("invalid keymap target");
                            return;
                        }*/
                        break;
                    case this.btn_upload_macro:
                        gStr = this.macro.getHexData();
                        gBool = this.cb_reboot_macro.selected
                        
//                        trace("mac : ", gStr.split(":").join("\n:"));
//                        trace(gStr.length);
                        
                        /*var gMacroLen:int = this.macro.getCurrnetMacroLength();
                        // gb = 4 * 42 * 12 = 480                        
                        if(168 != gMacroLen){ // ps2avrGB, U
                            Alert.show("invalid macro target");
                            return;
                        }*/
                        break;
					
					case this.btn_upload_qmacro:
						gIsQMacro = true;
						break;
					
					case this.btn_upload_dualaction:
						gStr = this.dualaction.getHexData();
						gBool = this.cb_reboot_dualaction.selected
						
						break;
                }
               
            
                Alert.show(
                    "GO?", 
                    "Confirm", 
                    Alert.YES|Alert.NO, 
                    this, 
                    function (event:CloseEvent):void { 
                        
                        if(event.detail == Alert.YES){
							if(gIsQMacro){
                                uploadQuickMacroData();
							}else if(gStr) {
                                GBManager.getInstance().writeFlash(gStr, __print, gBool);
                                showWaiting("processing...");
                            }
                        }
                    
                    }, 
                    null, 
                    Alert.YES, 
                    null
                ); 
                
            }

            protected function uploadQuickMacroData():void {               
                /*
                    1.5.0 이상부터는 quick macro extra 까지 처리
                */
                if(this.qmacro.hasExtraMacro()) {
                    var gDatas:Array = this.qmacro.getSplitData();	
                    // trace(this, gDatas[0]);					
                    // trace(this, gDatas[1]);					
                    GBManager.getInstance().uploadQuickMacroExtra(gDatas[0], gDatas[1], __print);
                }
                else {
                    GBManager.getInstance().uploadQuickMacro(this.qmacro.getHexData(), __print);
                }

                showWaiting("processing...");
            }

            protected function showWaiting(xMsg:String, xTitle:String = ""):void{
                
                WaitAlert.getInstance().showWaiting(xMsg, xTitle);
                
            }
            protected function removeWaiting():void{
                WaitAlert.getInstance().removeWaiting();
            }
            
            protected function _onClickBootmapper(event:MouseEvent):void
            {
                var processArgs:Vector.<String> = new Vector.<String>();
                processArgs.push("-bootmapper");
                /* if(isBootmapper){
                    processArgs.push("stop");
                }else{
                    processArgs.push("start");                    
                }
                isBootmapper = !isBootmapper; */
                
                GBManager.getInstance().runProcess(processArgs, __print);
            }
            
            protected function __print (xSuc:int, xStr:String):void {
				trace("__print   :   ", xStr);
//                trace(this.name, xStr);
                /*
                #define SUCCESS_INDEX_LED2_INFO 3
                #define SUCCESS_INDEX_DEVICE_READY 4
                #define SUCCESS_INDEX_DEVICE_ACTION 5
                #define SUCCESS_INDEX_BOOTMAPPER_START 6
                #define SUCCESS_INDEX_BOOTMAPPER_STOP 7
                SUCCESS_INDEX_KEYMAP_DOWNLOAD 8
				#define SUCCESS_INDEX_DUALACTION_DOWNLOAD 10
				#define SUCCESS_INDEX_TOGGLE_BOOTMAPPER 11
                */
                var gObj:Object = JSON.parse(xStr);
                if(xSuc == GBManager.SUCCESS_INDEX_COMPLETED){  // complete
                    trace("complete : ", gObj.message);
                    removeWaiting();
                }else if(xSuc == GBManager.SUCCESS_INDEX_ERROR){    // error
                    //                    trace(gObj.message);
					// 에러라면 초기화;
					isBootmapper = false;
					this.cb_bootmapper_state.selected = false; 
					
                    removeWaiting();
                    Alert.show(gObj.message, "error");
                }else if(xSuc == GBManager.SUCCESS_INDEX_WARNING){    // warning
                    
                    // 어떤 것이든 업로드가 시작되면 초기화
                    isBootmapper = false;
                    this.cb_bootmapper_state.selected = false; 
                    
                    showWaiting(gObj.message, "uploading...");
//                    trace("warning : ", gObj.message);
                }else if(xSuc == GBManager.SUCCESS_INDEX_BOOTMAPPER_START){    // bootmapper start
                    this.cb_bootmapper_state.selected = true;
                }else if(xSuc == GBManager.SUCCESS_INDEX_BOOTMAPPER_STOP){    // bootmapper stop
                    this.cb_bootmapper_state.selected = false;  
                }else if(xSuc == GBManager.SUCCESS_INDEX_KEYMAP_DOWNLOAD){    // keymap download
                    removeWaiting();
					
//                    trace(String(gObj.result).toUpperCase());
//                    trace(String(gObj.result).length/2);  

                    this.keymap.applySerializeData(gObj.result);
                }else if(xSuc == GBManager.SUCCESS_INDEX_MACRO_DOWNLOAD){    // macro download
                    removeWaiting();
//                    trace(String(gObj.result).toUpperCase());
//                    trace(String(gObj.result).length/2); 
                    
                    this.macro.applySerializeData(gObj.result);
                }
				else if(xSuc == GBManager.SUCCESS_INDEX_DUALACTION_DOWNLOAD){    // SUCCESS_INDEX_DUALACTION_DOWNLOAD
					removeWaiting();
					//                    trace(String(gObj.result).toUpperCase());
					//                    trace(String(gObj.result).length/2); 
					
					this.dualaction.applySerializeData(gObj.result);
				}
				else if(xSuc == GBManager.SUCCESS_INDEX_QUICK_MACRO_DOWNLOAD){	// SUCCESS_INDEX_QUICK_MACRO_DOWNLOAD
					removeWaiting();
					
//					trace("__print   :   ", gObj.result);
//					trace("__print   :   ", gObj.result.length/2);
					this.qmacro.applySerializeData(gObj.result);
				}
				else if(xSuc == GBManager.SUCCESS_INDEX_QUICK_MACRO_DOWNLOAD_WITH_EXTRA){
					removeWaiting();
					
					this.qmacro.applySerializeData(gObj.result);
				}
            }
            
            
            protected function _onClickDownload(event:MouseEvent):void
            {
                switch(event.currentTarget){
                    case this.btn_download:
                        GBManager.getInstance().downloadKeymap(this.keymap.currentHexFileInfo, __print);
                        break;
					case this.btn_download_macro:
						GBManager.getInstance().downloadMacro( __print);
						break;
					case this.btn_download_qmacro:
                        /*
                        1.5.0 이상부터는 quick macro extra 까지 로드해야한다.
                        */
                        // 다운로드 할 때마다 버젼을 체크한다.
                        GBManager.getInstance().updateVersion(__downloadQuickMacro);
						break;
                    case this.btn_download_dualaction:
                        GBManager.getInstance().downloadDualaction(__print);
                        break;
                }
                showWaiting("downloading...");
            }
            
            protected function __downloadQuickMacro(xSuc:int, xStr:String):void {
                if(xSuc == GBManager.SUCCESS_INDEX_VERSION_UPDATED){
                    this.qmacro.updateExtraMacroEnabled();
                    if(this.qmacro.hasExtraMacro()) {
                        GBManager.getInstance().downloadQuickMacroWithExtra(__print);
                    }
                    else {
                        GBManager.getInstance().downloadQuickMacro(__print);
                    }
                }
            }

            protected function __changeTarget(event:Event):void
            {
                if(event == null) return;
                
                if(event.currentTarget == this.keymap){
                    if(this.keymap.currentHexFileInfo.fileName.indexOf("_gb_") > -1){
//						this.grp_gb_keymap_control_gb_only.enabled = true;
						this.btn_upload.enabled = true;
						this.cb_reboot.enabled = true;
                        this.grp_gb_keymap_control.enabled = true;
                    }else{
						 if(this.keymap.currentHexFileInfo.targetName.indexOf("GB4U") > -1)
						{
							 this.grp_gb_keymap_control.enabled = true;
							 this.btn_upload.enabled = false;
							 this.cb_reboot.enabled = false;
							
//							this.grp_gb_keymap_control_gb_only.enabled = false;
//							this.grp_gb_keymap_control_for_sharing.enabled = true;
						}
						else
						{							
							this.grp_gb_keymap_control.enabled = false;                    
						} 
                    }
				}else if(event.currentTarget == this.macro){
					if(this.macro.currentMacroInfo.fileName.indexOf("_gb_") > -1){
						this.grp_gb_macro_control.enabled = true;
						this.btn_upload_macro.enabled = true;
						this.cb_reboot_macro.enabled = true;
					}else{
						if(this.macro.currentMacroInfo.targetName.indexOf("GB4U") > -1)
						{
							this.grp_gb_macro_control.enabled = true;
							this.btn_upload_macro.enabled = false;
							this.cb_reboot_macro.enabled = false;
						}
						else
						{							
							this.grp_gb_macro_control.enabled = false;                    
						} 
						                    
					}
				}else if(event.currentTarget == this.qmacro){
					
					// 퀵매크로는 gb & gb4u 모두 가능;
					
                }else if(event.currentTarget == this.dualaction){
					if(this.dualaction.currentDualactionInfo.fileName.indexOf("_gb_") > -1){
						this.grp_gb_dualaction_control.enabled = true;
						this.btn_upload_dualaction.enabled = true;
						this.cb_reboot_dualaction.enabled = true;
					}else{
						if(this.dualaction.currentDualactionInfo.targetName.indexOf("GB4U") > -1)
						{
							this.grp_gb_dualaction_control.enabled = true;
							this.btn_upload_dualaction.enabled = false;
							this.cb_reboot_dualaction.enabled = false;
						}
						else
						{							
							this.grp_gb_dualaction_control.enabled = false;                    
						} 
						                    
					}
				}
            }
            
            private function __onLoadOptions(event:Event):void
            {
                switch(event.type){
                    case Event.COMPLETE:
                        try{
                            var gURLoader:URLLoader = URLLoader(event.target);
//                            							 trace(this, gURLoader.data);
                            optionsData = JSON.parse(gURLoader.data);
                            
                            __startDesktop();                           
                            
                        }catch(e:Error){
                            trace(this, e);
                        }
                        
                        break;
                    
                    case ProgressEvent.PROGRESS:
                        break;
                    default:
                        Alert.show("__onLoadJson: " + event.toString());
                        break;
                }
            }
            
            private function __onValueCommit(event:Event):void
            {
                //                trace(this.tabbar.selectedIndex, (this.options)?this.options.isReady():"");
                //                trace(this.keymap, this.macro, this.options);
                if(bootMapperData){
                    if(this.keymap && this.viewStack.selectedChild == this.nc_keymap && !this.keymap.isReady()){
                        this.keymap.addEventListener(ConstString.CHANGE_TARGET, __changeTarget);
                        this.keymap.setData(bootMapperData);
                        this.keymap.init();
                    }else if(this.macro && this.viewStack.selectedChild == this.nc_macro && !this.macro.isReady()){
                        this.macro.addEventListener(ConstString.CHANGE_TARGET, __changeTarget);
                        this.macro.setData(bootMapperData);
                        this.macro.init();
					}else if(this.qmacro && this.viewStack.selectedChild == this.nc_qmacro && !this.qmacro.isReady()){
						this.qmacro.addEventListener(ConstString.CHANGE_TARGET, __changeTarget);
						this.qmacro.setData(bootMapperData);
						this.qmacro.init();
					}else if(this.dualaction && this.viewStack.selectedChild == this.nc_dualaction && !this.dualaction.isReady()){
						this.dualaction.addEventListener(ConstString.CHANGE_TARGET, __changeTarget);
						this.dualaction.setData(bootMapperData);
						this.dualaction.init();
                    }else if(this.options && this.viewStack.selectedChild == this.nc_options && !this.options.isReady()){
                        this.options.setData(optionsData);
                        this.options.init();
                    }
                }
            }
            
			protected function __onLocaleValueCommit(event:IndexChangeEvent):void
			{	
				var locale:String = String(this.ddl_locale.selectedItem.data);
				so.data.locale = locale;
				so.flush(); 
				resourceManager.localeChain = [ locale ];
			}
			
		]]>
    </fx:Script>
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <s:Group id="grp_ui" width="100%" height="100%">
        <s:layout>
            <s:VerticalLayout gap="0">
                
            </s:VerticalLayout>
        </s:layout>
        <s:Spacer height="5"/>
        <s:HGroup width="100%" verticalAlign="middle"> 
			<s:Spacer width="2"/>  
			<s:VGroup height="100%" verticalAlign="top">
				<s:DropDownList id="ddl_locale" width="76" change="__onLocaleValueCommit(event)" skinClass="skins.DropDownListSkinTiny" >
					<s:dataProvider>
						<mx:ArrayList>
							<fx:Object label="Eng" data="en_US"/>
							<fx:Object label="한국어" data="ko_KR"/>
						</mx:ArrayList>
					</s:dataProvider>
				</s:DropDownList>				
			</s:VGroup> 
            <s:Spacer width="40%"/>        
            <s:Label id="lb_mapper_version" text="{VERSION_CLIENT}"/>
            <s:Spacer width="10"/>
            <s:TabBar id="tabbar" width="70%" dataProvider="{viewStack}" skinClass="skins.TabBarSkin"
                      valueCommit="__onValueCommit(event)"/>
			<s:Spacer width="2"/>  
        </s:HGroup>
        <mx:ViewStack id="viewStack" width="100%" height="100%" borderStyle="solid" paddingBottom="4"
                      paddingLeft="4" paddingRight="4" paddingTop="4">	
            <s:NavigatorContent id="nc_keymap" label="{resourceManager.getString('lang','STR_KEY_MAPPER')}">
                <s:VGroup  width="100%" height="100%">
                    <s:HGroup width="100%" id="grp_gb_keymap_control" verticalAlign="middle">
						<s:HGroup width="100%" id="grp_gb_keymap_control_gb_only"  verticalAlign="middle">
	                        <s:Button id="btn_download" label="{resourceManager.getString('lang','STR_DOWNLOAD')}" click="_onClickDownload(event)" skinClass="skins.GreyButtonSkin" />
	                        <s:Spacer width="30%" minWidth="30" />
	                        <s:Button id="btn_upload" label="{resourceManager.getString('lang','STR_UPLOAD')}" click="_onClick(event)" />
	                        <s:CheckBox id="cb_reboot" label="{resourceManager.getString('lang','STR_REBOOT_AFTER_UPLOADING')}" selected="true"/>
						</s:HGroup>
						<s:HGroup width="100%" id="grp_gb_keymap_control_for_sharing" verticalAlign="middle">
	                        <s:Button id="btn_bootmapper" label="{resourceManager.getString('lang','STR_TOGGLE_BOOTMAPPER')}" click="_onClickBootmapper(event)" skinClass="skins.RedButtonSkin" />
	                        <s:CheckBox id="cb_bootmapper_state" enabled="false" />
						</s:HGroup>
                    </s:HGroup>
                    <s:Spacer height="5" />
                    <local:Keymap id="keymap" width="100%" height="100%" initialize="__onInitTabUI(event)" />
                </s:VGroup>
            </s:NavigatorContent>
            
            <!-- <s:NavigatorContent id="nc_layout" label="Layout" enabled="false">
                <s:VGroup  width="100%" height="100%">                   
                    <s:Spacer height="5" />
                    <local:KeyLayout id="keylayout" width="100%" height="100%" initialize="__onInitTabUI(event)" />
                    <s:Spacer height="15" />
                </s:VGroup>
            </s:NavigatorContent> -->			
            
            <s:NavigatorContent id="nc_macro" label="{resourceManager.getString('lang','STR_CUSTOM_MACRO')}">
                <s:VGroup  width="100%" height="100%">
                    <s:HGroup width="100%" id="grp_gb_macro_control" verticalAlign="middle">                        
                        <s:Button id="btn_download_macro" label="{resourceManager.getString('lang','STR_DOWNLOAD')}" click="_onClickDownload(event)" skinClass="skins.GreyButtonSkin" />
						<s:Spacer width="30%" minWidth="30" />                     
                        <s:Button id="btn_upload_macro" label="{resourceManager.getString('lang','STR_UPLOAD')}" click="_onClick(event)" />
                        <s:CheckBox id="cb_reboot_macro" label="{resourceManager.getString('lang','STR_REBOOT_AFTER_UPLOADING')}" selected="true" />
                    </s:HGroup>
                    <s:Spacer height="5" />
                    <local:Macro id="macro" width="100%" height="100%" initialize="__onInitTabUI(event)"/>
                </s:VGroup>
            </s:NavigatorContent>
			
			<s:NavigatorContent id="nc_qmacro" label="{resourceManager.getString('lang','STR_QUICK_MACRO')}">
				<s:VGroup  width="100%" height="100%">
					<s:HGroup width="100%" id="grp_gb_qmacro_control" verticalAlign="middle">                        
						<s:Button id="btn_download_qmacro" label="{resourceManager.getString('lang','STR_DOWNLOAD')}" click="_onClickDownload(event)" skinClass="skins.GreyButtonSkin" />
						<s:Spacer width="30%" minWidth="30" />                     
						<s:Button id="btn_upload_qmacro" label="{resourceManager.getString('lang','STR_UPLOAD')}" click="_onClick(event)" />
					</s:HGroup>
					<s:Spacer height="5" />
					<local:QuickMacro id="qmacro" width="100%" height="100%" initialize="__onInitTabUI(event)"/>
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_dualaction" label="{resourceManager.getString('lang','STR_DUAL_ACTION')}">
				<s:VGroup  width="100%" height="100%"> 
						<s:HGroup width="100%" id="grp_gb_dualaction_control" verticalAlign="middle">
							<s:Button id="btn_download_dualaction" label="{resourceManager.getString('lang','STR_DOWNLOAD')}" click="_onClickDownload(event)" skinClass="skins.GreyButtonSkin" />
							<s:Spacer width="30%" minWidth="30" />                     
							<s:Button id="btn_upload_dualaction" label="{resourceManager.getString('lang','STR_UPLOAD')}" click="_onClick(event)" />
							<s:CheckBox id="cb_reboot_dualaction" label="{resourceManager.getString('lang','STR_REBOOT_AFTER_UPLOADING')}" selected="true" />
						</s:HGroup>
					<s:Spacer height="5" />
					<local:DualAction id="dualaction" width="100%" height="100%" initialize="__onInitTabUI(event)"/>
				</s:VGroup>
			</s:NavigatorContent>
            
            <s:NavigatorContent id="nc_options" label="{resourceManager.getString('lang','STR_OPTIONS')}">
                <s:VGroup  width="100%" height="100%">
                    
                    <local:RgbOptions id="options" width="100%" height="100%" initialize="__onInitTabUI(event)"/>
                </s:VGroup>
            </s:NavigatorContent>
        </mx:ViewStack>
    </s:Group>
</local:BootmapperContainer>
