<?xml version="1.0" encoding="utf-8"?>
<local:MacroBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 xmlns:local="*"
		 >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import spark.components.NavigatorContent;
			import spark.layouts.supportClasses.DropLocation;
			
			private var fileReference:FileReference;
			private var hexData:String;
			private var __loadedFileName:LoadedFileName;
			

            override protected function getConfigStr():String {
                return "macroConfigArr";
            }
			
            override protected function getHeaderStr():String {
                return "CstMac";
            }
            
            override protected function getBytePerAKey():uint {
				// delay 포함하여 4byte
                return 4;
            }
            
            override protected function getShiftedCount(xCount:uint):uint {
                return xCount;
            }
			
			protected function __onClickSaveHex(event:MouseEvent):void
			{
                var gHexStr:String =__getHexData();
				var gFile:FileReference = new FileReference();
				var gDate:Date = new Date();
				
				var gName:String ;
				if(__loadedFileName && __loadedFileName.hasName())
				{
					gName = __loadedFileName.name + _currentMacroInfo.fileExt;
				}else{
					
					gName = _currentMacroInfo.fileName + Util.dateToString(gDate)+ _currentMacroInfo.fileExt;
				}
				gFile.save(gHexStr, gName);
			}
            
            public function getHexData():String{
                return __getHexData(true);
            }
            
            protected function __getHexData(xExceptNewline:Boolean = false):String{
                // serialize -> parse
                var gMacroNum:int = _currentMacroInfo.macroNum;
                var gMacroLenMax:int = _currentMacroInfo.macroLength;
                gMacroLenMax = gMacroLenMax * 2;	// 1byte 당 2글자를 사용하므로;
                
                var gMacroLen:int;
                var gDataStr:String = "";
                var gMacroStr:String = "";			
                var gStr:String;
                var gObj:Object;
                var gVal:int;
                var gList:IList;
                var gMacroKey:MacroKey;
                for(var i:int = 0;i < gMacroNum; ++i){	
                    gList = macroVector[i];
                    if(!gList) {
                        gList = new ArrayList();
                    }		
                    gMacroLen = gList.length;
                    gMacroStr = "";
                    for(var k:int = 0;k < gMacroLen; ++k){
                        
                        gObj = null;
                        gObj = gList.getItemAt(k);
                        
                        gMacroKey = gObj.macroKey as MacroKey;
                        gStr = HexParser.getHexString(gMacroKey);
                        
                        gMacroStr += gStr;
                        
                    }
                    
                    while(gMacroStr.length < gMacroLenMax){
                        gMacroStr += "00";
                    }
                    
                    gDataStr += gMacroStr;							
                }
                
                //				trace(gDataStr.length, gDataStr.substr(0, 100));
                //				return;
                
                var gHexStr:String = HexParser.convertToHex(gDataStr, gMacroNum * gMacroLenMax/2, parseInt(_currentMacroInfo.startAddress, 16), xExceptNewline);
                return gHexStr;
            }
            
			protected function __onClickLoadHex(event:MouseEvent):void
			{
				fileReference = new FileReference();
				fileReference.addEventListener(Event.SELECT, __onFileReference);
				fileReference.addEventListener(Event.CANCEL, __onFileReference);
				fileReference.addEventListener(Event.COMPLETE, __onFileReference);
				fileReference.browse([new FileFilter("ps2avrU macor.hex file (*.hex)", "*.hex")]);
			}
			
			protected function __onFileReference(event:Event):void
			{
				switch(event.type){
					case Event.SELECT:
						fileReference.load();
						
						break;
					case Event.CANCEL:
						break;
					case Event.COMPLETE:
						try{
							__loadedFileName = new LoadedFileName();
							__loadedFileName.name = fileReference.name;
							
							if(__loadedFileName.type == "hex"){
								hexData = fileReference.data.toString();
								
								if(HexParser.getStartAddress(hexData) != _currentMacroInfo.startAddress){
									throw new Error("\""+fileReference.name + "\" is not macro file");
								}
								parse();
							}else{
								__loadedFileName = null;
								throw new Error("invalid file type");
							}
							
						}catch(e:Error){							
							Alert.show(e.message);
							return;
						}
						break;
					
				}
			}
			
			private function parse():void
			{	
				MacroKey.resetSplitIndex();
				var gMacroVec:Vector.<IList> = HexParser.parseMacro(hexData, _currentMacroInfo);
				if(gMacroVec == null) {
					Alert.show("invalid macro target");
					return;
				}
				
				macroVector = gMacroVec;
				
				start();
				
				
			}
			
			protected function __onClickDelay(event:MouseEvent):void
			{				
				// apply delay	
				var gArrayList:IList = this.list_macro.dataProvider;	
				var gSelectedIndex:int = this.list_macro.selectedIndex;
				if(gSelectedIndex < 0){					
					
				}else{
					trace(this.name, "apply delay: my index = ", gSelectedIndex);
					applyDelay(gSelectedIndex);
				}
			}
            
            protected function __onClickDelayAll(event:MouseEvent):void
            {
                var gList:IList = macroVector[_macroIndex];
                var gLen:int = gList.length;
                var gItem:Object;
                for(var i:int = 0;i < gLen; ++i){
                    applyDelay(i);
                }     
            }
			
			private function applyDelay(xSelectedIndex:int):void
			{
				var gArrayList:IList = this.list_macro.dataProvider;
				var gItem:Object = gArrayList.getItemAt(xSelectedIndex);
				var gSelectedMacroKey:MacroKey = gItem.macroKey as MacroKey;
				gSelectedMacroKey.delay = Util.getDelay(Number(this.ns_delay.value));
				trace(this.name, "gSelectedMacroKey.delay : ", gSelectedMacroKey.delay);
				gItem.label = Util.getLabel(gSelectedMacroKey);
			}
            
            public function applySerializeData(xDataStr:String):void{
                MacroKey.resetSplitIndex();
                var gMacroVec:Vector.<IList> = HexParser.parseToListDataForMacro(xDataStr, _currentMacroInfo.macroNum, _currentMacroInfo.macroLength);
                if(gMacroVec == null) {
                    Alert.show("invalid macro target");
                    return;
                }
                
                macroVector = gMacroVec;
                
                start();	
            }
            
        ]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
    <s:Scroller width="100%" height="100%">
	<s:Group id="grp_ui" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="0">
				
			</s:VerticalLayout>
		</s:layout>
		<s:HGroup verticalAlign="middle" width="100%">		
			<local:KeycodeDropDownList id="ddl_keycodes" width="150" prompt="Key codes...">
			</local:KeycodeDropDownList>
			<s:Spacer width="100%" />	
			<s:Label id="lb_target" text="{resourceManager.getString('lang','STR_TARGET')}:"/>
			<s:DropDownList id="ddl_target" width="200" change="__onTargetValueCommit(event)" />
		</s:HGroup>
		<s:Spacer height="5"/>
		<local:BMBorderContainer width="100%" height="100%" minHeight="300">	
			<s:Spacer height="5"/>
			<s:ButtonBar id="tabbar" dataProvider="{viewStack}" valueCommit="__onValueCommit(event)" requireSelection="true"/>
			<s:Spacer height="10" />
			<s:HGroup height="100%" width="100%" >
	            <s:VGroup width="300" height ="100%">
	                <s:Label text = "{resourceManager.getString('lang','STR_STRING_PARSING')}" />                
	                <s:HGroup width="100%" >
	                    <s:TextArea id="ta_string" width="100%" height ="100" />    
	                </s:HGroup>               
					<s:HGroup width="100%" >
						<s:Spacer width="100%" />	
						<s:Button label="{resourceManager.getString('lang','STR_PARSE_STRING')} >>" click="__onClickParseString(event)"/>
					</s:HGroup>
	                <s:Spacer height="5" />
	                <s:Label text = "{resourceManager.getString('lang','STR_TEST_AREA')}" />                
	                <s:TextArea width="100%" height ="100%" />
	            </s:VGroup>
				<s:List width="300" height="100%" id="list_macro" dragEnabled="true" dragMoveEnabled="true" dropEnabled="false"
						dragDrop="__onDrag(event)" dragEnter="__onDrag(event)" dragComplete="__onDrag(event)" dragExit="__onDrag(event)" dragOver="__onDrag(event)" dragStart="__onDrag(event)"
						click="__onClickList(event)" itemRenderer="MacroKeyListRenderer"
						/>
				<s:VGroup width="100%" height="100%">
					<s:Button label="{resourceManager.getString('lang','STR_SPLIT')}" click="__onClickSplit(event)"/>
					<s:Spacer height="5" />
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Button label="{resourceManager.getString('lang','STR_APPLY_DELAY')}" click="__onClickDelay(event)"/>
						<s:Spacer height="5" />
						
	                    <s:NumericStepper id="ns_delay" width="55" value="1" stepSize="0.1" maximum="5"
	                                      snapInterval="0.1" allowValueWrap="false"/><s:Label text="{resourceManager.getString('lang','STR_SEC_MAX_STEP')}"/>
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Spacer width="100%" />
						<s:Button label="{resourceManager.getString('lang','STR_APPLY_ALL')}" click="__onClickDelayAll(event)"/>
					</s:HGroup>
					<s:Spacer height="5" />
					<s:Button label="{resourceManager.getString('lang','STR_DESELECT')}" click="__onClickDeselect(event)"/>
					<s:Spacer height="5" />
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Button label="{resourceManager.getString('lang','STR_REMOVE')}" click="__onClickRemove(event)"/>
						<s:Spacer width="100%" />
						<s:Button label="{resourceManager.getString('lang','STR_REMOVE_ALL')}" click="__onClickRemoveAll(event)"/>
					</s:HGroup>
					<s:Label text="" id="lb_char" />
	                <s:Spacer height="10" />
				</s:VGroup>			
			</s:HGroup>
			<mx:ViewStack id="viewStack" borderStyle="none" width="100%" />
		</local:BMBorderContainer>	
		<s:Spacer height="5"/>
		
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>
			
			<s:Button label="Save .hex" click="__onClickSaveHex(event)"/>
			<s:Button label="Load .hex" click="__onClickLoadHex(event)"/>
			
			<s:Spacer width="100%" />
			
			<s:HGroup verticalAlign="middle">
				<s:Label text="{resourceManager.getString('lang','STR_MACRO_COPY')}:" />
				<s:DropDownList id="ddl_copy_to" width="200">
					<s:layout>
						<s:VerticalLayout gap="0"
										  horizontalAlign="contentJustify"
										  requestedRowCount="12" />
					</s:layout>
				</s:DropDownList>
				<s:Button label="{resourceManager.getString('lang','STR_EXCUTE')}" click="__onClickCopyTo(event)"/>
			</s:HGroup>  
			<s:Spacer width="5"/>
			
		</s:Group>
		
		<s:Spacer height="5"/>
		<local:BMBorderContainer width="100%" >	
			
			<local:KeycodeSelector id="keycodeSelector" width="100%" height="324"/>
		</local:BMBorderContainer>
	</s:Group>
    </s:Scroller>
</local:MacroBase>
