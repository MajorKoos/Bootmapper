<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the last button in a Spark ButtonBar component.  

       @see spark.components.ButtonBar
       @see spark.components.ButtonBarButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="70" minHeight="27" 
                   alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
            /** 
             * @copy spark.skins.spark.ApplicationSkin#hostComponent
             */
            [HostComponent("spark.components.ButtonBarButton")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

       /** 
        *  @private
        */     
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         *  @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         *  @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
        {
           super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<s:Group left="0" right="0" top="0" bottom="0">
		
		<!-- layer 1: shadow -->
		
		<!-- layer 2: fill -->
		<!--- @private -->
		<s:BitmapImage id="fill" 
					   source="@Embed(source='/assets/img/bt_bg_white_last.png', scaleGridLeft='3', scaleGridTop='3', scaleGridRight='4', scaleGridBottom='4')" 
					   source.selectedStates="@Embed(source='/assets/img/bt_bg_grey_light_last.png', scaleGridLeft='3', scaleGridTop='3', scaleGridRight='4', scaleGridBottom='4')" 
					   alpha.overStates="0.5"
					   alpha = "1"
					   left="0" right="0" top="0" bottom="0" />
		
		<!-- layer 3: fill lowlight -->
		
		<!-- layer 4: fill highlight -->
		
		<!-- layer 5: highlight stroke (all states except down) -->
		
		<!-- layer 6: highlight stroke (down state only) -->
		
		<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
		<s:Line xFrom="0" xTo="0" yFrom="1" yTo="27">
			<s:stroke>
				<s:SolidColorStroke color="0x999999" weight="1" caps="square"/>
			</s:stroke>
		</s:Line>
	</s:Group>
        
    <!-- layer 8: text -->
    <!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>